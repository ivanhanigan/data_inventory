require(swishdbtools)
get_passwordTable()
con <- connect2postgres2("data_inventory_ltern_dev")
con <- connect2postgres2("data_inventory_ltern_dev")
pgListTables(con, "public")
dbGetQuery(con, "select * from project")
ch <- connect2postgres2("ltern")
pgListTables(ch, "ltern")
proj <- dbGetQuery(ch,
"
select pn_code_broad_group as title, plot_leader as personnel
FROM ltern.data_deed INNER JOIN ltern.plot_network_code ON ltern.data_deed.pn_deed_code = ltern.plot_network_code.pn_deed_code
GROUP BY pn_code_broad_group, plot_leader, broad_group_ordered
HAVING (((ltern.data_deed.plot_leader) Not Like '%Papst%'))
order by broad_group_ordered
")
proj
proj$abstract <- ""
# dbWriteTable(con, name = "project", value = proj, append = T)
for(i in 6:12){
#i = 2
pl <- proj[i,"title"]
print(pl)
dsts <- dbGetQuery(ch,
)
""
)
for(i in 1:12){
#i = 2
pl <- proj[i,"title"]
print(pl)
dsts <- dbGetQuery(ch,
#cat(
paste("
SELECT ltern.plot_network_code.pn_code_broad_group, ltern.data_package.refid, ltern.data_package.data_package_title AS title, ltern.data_package.contact_name AS contact, ltern.data_package.principal_investigator AS creator,
'' AS abstract,
ltern.data_package.licence_code_package AS intellectualrights, '' AS pubdate, ltern.data_package.spatial_resolution AS geographicdescription, ltern.data_package.geographic_description AS boundingcoordinates, ltern.data_package.temporal_coverage AS temporalcoverage, '' AS metadataprovider, ltern.data_package.contract_type as tern_contract_type
FROM ltern.data_package INNER JOIN ltern.plot_network_code
ON ltern.data_package.plot_network_study_name = ltern.plot_network_code.plot_network_study_name
WHERE ltern.plot_network_code.pn_code_broad_group = '",pl,"'
AND (ltern.data_package.tern_type Like 'Project%' OR ltern.data_package.tern_type='Background')
AND ltern.data_package.availability='Available'
",sep = "")
)
#head(dsts)
#t(dsts[1,])
#table(dsts$tern_contract_type)
dbWriteTable(con, name = paste("dataset",i,sep=""), value = dsts, append = F)
dbSendQuery(con,
#cat(
paste("
insert into dataset (project_id, ltern_id, title, contact, creator, abstract, intellectualrights,  geographicdescription, boundingcoordinates, temporalcoverage, metadataprovider, tern_contract_type)
select ",i,", refid, title, contact, creator, abstract, intellectualrights,  geographicdescription, boundingcoordinates, temporalcoverage, metadataprovider, tern_contract_type
from dataset",i,sep ="")
)
}
i = 1
pl <- proj[i,"title"]
print(pl)
dsts <- dbGetQuery(ch,
#cat(
paste("
SELECT ltern.plot_network_code.pn_code_broad_group, ltern.data_package.refid, ltern.data_package.data_package_title AS title, ltern.data_package.contact_name AS contact, ltern.data_package.principal_investigator AS creator,
'' AS abstract,
ltern.data_package.licence_code_package AS intellectualrights, '' AS pubdate, ltern.data_package.spatial_resolution AS geographicdescription, ltern.data_package.geographic_description AS boundingcoordinates, ltern.data_package.temporal_coverage AS temporalcoverage, '' AS metadataprovider, ltern.data_package.contract_type as tern_contract_type
FROM ltern.data_package INNER JOIN ltern.plot_network_code
ON ltern.data_package.plot_network_study_name = ltern.plot_network_code.plot_network_study_name
WHERE ltern.plot_network_code.pn_code_broad_group = '",pl,"'
AND (ltern.data_package.tern_type Like 'Project%' OR ltern.data_package.tern_type='Background')
AND ltern.data_package.availability='Available'
",sep = "")
)
#head(dsts)
#t(dsts[1,])
#table(dsts$tern_contract_type)
dbWriteTable(con, name = paste("dataset",i,sep=""), value = dsts, append = F)
dbSendQuery(con,
#cat(
paste("
insert into dataset (project_id, ltern_id, title, contact, creator, abstract, intellectualrights,  geographicdescription, boundingcoordinates, temporalcoverage, metadataprovider, tern_contract_type)
select ",i,", refid, title, contact, creator, abstract, intellectualrights,  geographicdescription, boundingcoordinates, temporalcoverage, metadataprovider, tern_contract_type
from dataset",i,sep ="")
)
}
dbWriteTable(con, name = "project", value = proj, append = T)
dbWriteTable(con, name = "project", value = proj, append = T)
dsts <- dbGetQuery(ch,
#cat(
paste("
SELECT ltern.plot_network_code.pn_code_broad_group, ltern.data_package.refid, ltern.data_package.data_package_title AS title, ltern.data_package.contact_name AS contact, ltern.data_package.principal_investigator AS creator,
'' AS abstract,
ltern.data_package.licence_code_package AS intellectualrights, '' AS pubdate, ltern.data_package.spatial_resolution AS geographicdescription, ltern.data_package.geographic_description AS boundingcoordinates, ltern.data_package.temporal_coverage AS temporalcoverage, '' AS metadataprovider, ltern.data_package.contract_type as tern_contract_type
FROM ltern.data_package INNER JOIN ltern.plot_network_code
ON ltern.data_package.plot_network_study_name = ltern.plot_network_code.plot_network_study_name
WHERE ltern.plot_network_code.pn_code_broad_group = '",pl,"'
AND (ltern.data_package.tern_type Like 'Project%' OR ltern.data_package.tern_type='Background')
AND ltern.data_package.availability='Available'
order by ltern.data_package.data_package_title
",sep = "")
)
head(dsts)
for(i in 1:12){
#i = 1
pl <- proj[i,"title"]
print(pl)
dsts <- dbGetQuery(ch,
#cat(
paste("
SELECT ltern.plot_network_code.pn_code_broad_group, ltern.data_package.refid, ltern.data_package.data_package_title AS title, ltern.data_package.contact_name AS contact, ltern.data_package.principal_investigator AS creator,
'' AS abstract,
ltern.data_package.licence_code_package AS intellectualrights, '' AS pubdate, ltern.data_package.spatial_resolution AS geographicdescription, ltern.data_package.geographic_description AS boundingcoordinates, ltern.data_package.temporal_coverage AS temporalcoverage, '' AS metadataprovider, ltern.data_package.contract_type as tern_contract_type
FROM ltern.data_package INNER JOIN ltern.plot_network_code
ON ltern.data_package.plot_network_study_name = ltern.plot_network_code.plot_network_study_name
WHERE ltern.plot_network_code.pn_code_broad_group = '",pl,"'
AND (ltern.data_package.tern_type Like 'Project%' OR ltern.data_package.tern_type='Background')
AND ltern.data_package.availability='Available'
order by ltern.data_package.data_package_title
",sep = "")
)
#head(dsts)
#t(dsts[1,])
#table(dsts$tern_contract_type)
dbWriteTable(con, name = paste("dataset",i,sep=""), value = dsts, append = F)
dbSendQuery(con,
#cat(
paste("
insert into dataset (project_id, ltern_id, title, contact, creator, abstract, intellectualrights,  geographicdescription, boundingcoordinates, temporalcoverage, metadataprovider, tern_contract_type)
select ",i,", refid, title, contact, creator, abstract, intellectualrights,  geographicdescription, boundingcoordinates, temporalcoverage, metadataprovider, tern_contract_type
from dataset",i,sep ="")
)
}
# qc
dbGetQuery(con,
"select tern_contract_type, count(*)
from dataset
group by tern_contract_type"
)
prj <- "Biomass_Smoke_Validated_Events"
#"Eco-social observatories: Tipping points" #"Air_pollution_modelling_LUR_LCT"  # "Air pollution modelling: LUR_Western_Sydney"  "Air_Pollution_Monitoring_Stations_NSW" #
dset <- "biomass_smoke_events_db"
#"ESTPDB" # "LUR_LCT_passive_samplers_2006_2008" #"LUR_Western_Sydney_passive_samplers"  # "AP_monitor_NSW_2014_2015" #  "biomass_smoke_events_database"
# walkability_osm
entities <- T
show_exemplar <- T
knitr::knit2html("EML_metadata_short.Rmd", stylesheet='custom.css')
setwd("~/tools/web2py/applications/data_inventory/static")
knitr::knit2html("EML_metadata_short.Rmd", stylesheet='custom.css')
if(entities){
#### entity ####
#dat <- dbGetQuery(ch, "select * from entity")
dat_ent <- dbGetQuery(ch,
#cat(
sprintf("select
t3.*
from project t1
join dataset t2
on t1.id = t2.project_id
join entity t3
on t2.id = t3.dataset_id
where t1.title = '%s'
and t2.shortname = '%s'", prj, dset)
)
if(nrow(dat_ent) > 0){
help_ent  <- sqldf("select t1.eml_node, t1.help_comment, t1.datinv
from crosswalk t1
where eml_table like '%entity%'",
connection = ch)
#help_ent
for(j in 1:nrow(dat_ent)){
#j = 1
print(paste("#### File", j))
ent_j <- data.frame(V1 = names(dat_ent), V2=t(dat_ent[j,]))
ent_j$order <- 1:nrow(ent_j)
#title2 <- paste(c(j, "entity", as.character(ent_j[1,2])),
#        collapse = ", ", sep = "")
#  title2
qc_ent <- merge(ent_j, help_ent, by.x = "V1", by.y = "datinv", all.x = T)
qc_ent2 <- qc_ent[order(qc_ent$order),c(1,2,5)]
#qc_ent2
#qc_ent3 <- data.frame(index = rep(title2, nrow(qc_ent2)),
#                      index = c(title2, rep("", nrow(qc_ent2) - 1)),
#                      meta = qc_ent2)
names(qc_ent2) <- c("variable","value","help")
qc_ent2[,2] <- gsub("\n", " | ", qc_ent2[,2])
#print(kable(qc_ent2, row.names = F))
if(show_exemplar){
print(xtable(qc_ent2[-c(1,2),]), type = "html", include.rownames = F)
} else {
print(xtable(qc_ent2[-c(1,2),-2]), type = "html", include.rownames = F)
}
#write.csv(qc_ent2, paste(dset, "_data_deposit_form.csv", sep = ""), row.names = F)
}
} else {
print(xtable(dat_ent[,c("entityname","entitydescription","physical_distribution")]), type = "html", include.rownames = F)
}
} else {
print("no files")
}
